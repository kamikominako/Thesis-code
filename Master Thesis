# ----------------------------------------------------------------------------------
# -------------------- Load functions and pacakges ---------------------------------
# ----------------------------------------------------------------------------------

list.of.packages <- c("ctsem",
                      "ggplot2",
                      "readxl",
                      "tidyverse",
                      "ctsemOMX",
                      "ggpubr",
                      "corrr",
                      "ggcorrplot",
                      "FactoMineR",
                      "factoextra",
                      "stats",
                      "qgraph"
)

new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

lapply(list.of.packages, library, character.only=TRUE)

devtools::install_github("ryanoisin/ctnet", force = TRUE)
library(ctnet)

# R-functions downloaded from https://osf.io/9sgdn/files/osfstorage
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/fun_plots.R')
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/EI_VAR.R')
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/IE.R')
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/DE.R')
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/TE.R')
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/ct_centrality.R')

# load working environment
getwd()
setwd('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata')
data <- read_excel('ESMdata.xlsx')

# ----------------------------------------------------------------------------------
# -------------------- SIMULATION --------------------------------------------------
# ----------------------------------------------------------------------------------

# model specification
set.seed(3)
Tpoints <- 100
nmanifest <- 3
nlatent <- 3

# define DRIFT matrices
true_drift_cont = DRIFT=matrix(c(-.3,-.5,0,.2,-.5,-.4,0,.1,-.1),nlatent,nlatent,byrow=T)
true_drift_disc = DRIFT=matrix(c(.7,-.2,.0,.2,.6,-.6,0,0.001,.9),nlatent,nlatent,byrow=T)

#generating model
gm_c<-ctModel(Tpoints=Tpoints,n.manifest = nmanifest,n.latent = nlatent,
              LAMBDA = diag(x = 1, nlatent, nmanifest),
              DRIFT=true_drift_cont,
              #TDPREDMEANS=matrix(c(rep(0,Tpoints-10),1,rep(0,9)),ncol=1),
              # TDPREDEFFECT=matrix(c(tdpredeffect,0),nrow=nlatent),
              DIFFUSION = matrix(c(0,0,.9,0,0,.9,0,0,.9),3,3),
              #CINT = matrix(c(cint1,cint2),ncol=1),
              # T0VAR=diag(2,nlatent,nlatent),
              MANIFESTVAR = "auto")

#----------------------------------------------------
#---------- Generate four data structures -----------
#----------------------------------------------------

set.seed(3)
# ------------------------------------------------------------------------------
# data with equally spaced time-intervals and equal timescales
newdat_complete <- ctGenerate(ctmodelobj = gm_c,
                              n.subjects = 1,
                              burnin = 2)

# ------------------------------------------------------------------------------
# data with equally spaced time-intervals and different timescales
newdat_unts <- ctGenerate(ctmodelobj = gm_c,
                          n.subjects = 1,
                          burnin = 2) 


#mock data-set with different timescale by imputing NA's
indices_to_keep_1 <- seq(from = 2, to = length(newdat_unts[,4]), by = 2)
indices_to_keep <- seq(from = 3, to = length(newdat_unts[,5]), by = 3)

# Replace values with NA, except at the specified indices
newdat_unts[,5][-indices_to_keep] <- NA
newdat_unts[,4][-indices_to_keep_1] <- NA

# ------------------------------------------------------------------------------
# data with unequally spaced time-intervals and equal timescales
newdat_unti <- ctGenerate(ctmodelobj = gm_c,
                          n.subjects = 1,
                          burnin = 2,
                          dtmean = 1.5, # unequal timeintervals
                          logdtsd = 1) # introduce some variability)

# ------------------------------------------------------------------------------
# data with unequally spaced time-intervals and different timescales
newdat_untisc <- ctGenerate(ctmodelobj = gm_c,
                            n.subjects = 1,
                            dtmean = 1.5,
                            logdtsd = 1)

# Replace values with NA, except at the specified indices
newdat_untisc[,5][-indices_to_keep] <- NA
newdat_untisc[,4][-indices_to_keep_1] <- NA

# Check 
head(newdat_complete)
head(newdat_unts)
head(newdat_unti)
head(newdat_untisc)

#--------------------------------SIMULATION-------------------------------------
# # 4. CHECK; Fit CTM using ctModel
# wide_4 <- ctLongToWide(data = newdat_c, 
#                        id = "id",
#                        time = "time", 
#                        manifestNames = colnames(newdat_c)[-c(1:2)])
# 
# # generate subject specific time intervals based on the absolute time information
# wide_s4 = ctIntervalise(datawide = wide_4,
#                         Tpoints = Tpoints,
#                         n.manifest = nlatent, 
#                         manifestNames = colnames(newdat_c)[-c(1:2)])
# 
# # model specifications
# truemodel <- ctModel(
#   n.latent = nlatent, #n.latent = 1, #latent variables
#   n.manifest = nmanifest, #observable (measured) variables
#   Tpoints = Tpoints, #amount of measured points
#   LAMBDA = diag(x = 1, nrow = nlatent, ncol = nmanifest),
#   MANIFESTMEANS = matrix(c(0, "manifestmean2", "manifest3")), #auto to check
#   MANIFESTVAR = "auto"
# )
# 
# fit_4 <- ctFit(dat = wide_s4, 
#                ctmodelobj = model_4, 
#                objective = "Kalman", #for N=1
#                stationary = "T0VAR") #for N=1
# 
# # inspect estimated parameters --> compare with true drift matrices
# summary(fit_4)
# summary(fit_4, verbose= TRUE)["discreteDRIFTstd"]


#----------------------------------------------------
#---------- Plot simulated data ---------------------
#----------------------------------------------------

# ------------------------------------------------------------------------------
# function that plots the different data structures 
plot_data <- function(data) {
  plot(data[, 2][0:200], data[, 3][0:200], type = 'o', cex = 0.3,
       xlab = 'Time in hours',
       ylab = 'Scores',
       ylim = c(-3,3.5),
       xlim = c(0,100))
  par(new = TRUE)
  plot(data[, 2][0:200], data[, 4][0:200], type = 'o', cex = 0.3, col = 'red',
       xlab = '',
       ylab = '',
       yaxt = "n",
       xaxt = "n",
       ylim = c(-3,3.5))
  par(new = TRUE)
  plot(data[, 2][0:200], data[, 5][0:200], type = 'o', cex = 0.3,
       col = rgb(red = 0, green = .5, blue = 1, alpha = 0.6),
       xlab = '',
       ylab = '',
       yaxt = "n",
       xaxt = "n",
       ylim = c(-3,3.5))
  legend(x = "topright",
         legend = c("Symptom 1",
                    "Symptom 2",
                    "Symptom 3"),
         col = c('black',
                 'red',
                 rgb(red = 0, green = .5, blue = 1, alpha = 0.5)),
         pch = c(1, 1, 1),
         lty = c(1, 1, 1),
         cex = 0.6)
}

# Plot scaled data
newdat_unti_s = apply(newdat_unti[,3:5],2,scale)
newdat_unti_s = cbind(newdat_unti[,1:2],newdat_unti_s)
plot_data(newdat_unti_s)
max(newdat_unti)

# ----------------------------------------------------------------------------------
# -------------------- Model's specification ---------------------------------------
# ----------------------------------------------------------------------------------

# make variable labels
lab <- c("Y1","Y2","Y3")
p <- 3

# ---------- CT-VAR Model Estimation -------------
ctmodel_sim <- ctModel(
  type = 'stanct',
  n.latent = nlatent, #n.latent = 1, #latent variables
  n.manifest = nmanifest, #observable (measured) variables
  Tpoints = Tpoints, #amount of measured points
  LAMBDA = diag(x = 1, nrow = nlatent, ncol = nmanifest),
  MANIFESTMEANS = matrix(c(0, "manifestmean2", "manifest3")), #auto to check
  MANIFESTVAR = "auto",
  latentNames=c('Y1','Y2','Y3'),
  manifestNames=c('Y1','Y2','Y3')
  #DRIFT = matrix(c(rep('0',63), "diffusion"), 8)
)

# ct_fit = ctStanFit(datalong = newdat_complete,
#                    ctstanmodel = ctmodel_sim,
#                    intoverstates = TRUE)
# 
# ctres <- getdrift(summary(ct_fit))

# ---------- DT-VAR Model Estimation -------------
dtmodel_sim <- ctModel(
  # type standt for discrete 
  type = 'standt',
  n.latent = nlatent, #n.latent = 1, #latent variables
  n.manifest = nmanifest, #observable (measured) variables
  Tpoints = Tpoints, #amount of measured points
  LAMBDA = diag(x = 1, nrow = nlatent, ncol = nmanifest),
  MANIFESTMEANS = matrix(c(0, "manifestmean2", "manifest3")), #auto to check
  MANIFESTVAR = "auto",
  latentNames=c('Y1','Y2','Y3'),
  manifestNames=c('Y1','Y2','Y3')
)

# dt_fit = ctStanFit(datalong = newdat_complete,
#                 ctstanmodel = dtmodel_sim,
#                 intoverstates = TRUE)
# 
# dtres <- getdrift(summary(dt_fit), mode = "DT")


#----------------------------------------------------
#---------- Fit models on all different data sets ---
#----------------------------------------------------

fit_model = function(dataset,model) {
  set.seed(3)
  # Model fitting
  matrices = list()
  
  # Loop for model fitting and matrix extraction
  for (i in 1:3) {
    fit = ctStanFit(datalong = dataset,
                    ctstanmodel = model,
                    intoverstates = TRUE)
    
    results = summary(fit)
    results = as.data.frame(results$parmatrices)
    
    drift = results %>%
      filter(matrix == 'DRIFT') %>%
      select(Mean)
    
    drift = data.matrix(drift)
    drift = matrix(drift, nrow = nlatent, ncol = nlatent, byrow = TRUE)
    
    matrices[[i]] = drift
  }
  
  # Calculate mean matrix
  mean_matrix = Reduce(`+`, matrices) / length(matrices)
  
  return(list(mean_matrix = mean_matrix))
}

# Define the data sets and models
datasets <- list(newdat_complete, newdat_unts, newdat_unti, newdat_untisc)
models <- list(ctmodel_sim, dtmodel_sim)

# Initialize the result list and biases
mean_matrices <- list()
biases <- matrix(NA, nrow = length(datasets), ncol = length(models))

# ---------- FIT MODELS -------------
# Fit models and calculate mean matrices
for (i in 1:length(datasets)) {
  mean_matrices[[i]] <- list()
  for (j in 1:length(models)) {
    result <- fit_model(datasets[[i]], models[[j]])
    mean_matrices[[i]][[j]] <- result$mean_matrix
  }
}

# ---------- Extract relevant info -------------
# Calculate biases
for (i in 1:length(datasets)) {
  biases[i, 1] <- round(mean(abs(mean_matrices[[i]][[1]]) - abs(true_drift_cont)), 3)
  biases[i, 2] <- round(mean(abs(mean_matrices[[i]][[2]]) - abs(true_drift_disc)), 3)
  
  # median_biases[i, 1] <- round(median(abs(mean_matrices[[i]][[1]] - true_drift_cont)), 3)
  # median_biases[i, 2] <- round(median(abs(mean_matrices[[i]][[2]] - true_drift_disc)), 3)
}

#----------------------------------------------------
#---------- Plot biases ------------------------- ---
#----------------------------------------------------

# Prepare results data frame for plotting
labels = c('Equal time-intervals,\n equal timescales',
           'Equal time-intervals, \nunequal timescales',
           'Unequal time-intervals, \nequal timescales',
           'Unequal time-intervals, \nunequal timescales',
           'Equal time-intervals,\n equal timescales',
           'Equal time-intervals, \nunequal timescales',
           'Unequal time-intervals, \nequal timescales',
           'Unequal time-intervals, \nunequal timescales')

biases = matrix(biases,ncol = 1)
biases_df = as.data.frame(biases)
colnames(biases_df) = c("Mean absolute bias")

biases_df = biases_df %>%
  mutate(Model = c(rep('CT model',4),rep('DT model',4))) %>%
  mutate(`Data set` = labels) %>%
  mutate(Bias = as.numeric(`Mean absolute bias`))

# Plot the biases of DT and CT 
ggplot(biases_df, 
       aes(x = forcats::fct_rev(`Data set`),
           y = `Mean absolute bias`,
           fill = Model)) +
  geom_bar(stat = 'identity',
           position = position_dodge(),
           width = .7) + 
  ylim(0,max(biases_df$Bias+.05)) +
  xlab('Data set') +
  geom_text(aes(label = Bias), 
            vjust = .5,
            hjust = -.1,
            size = 3,
            position = position_dodge(.7)) +
  theme(plot.title = element_text(size = 10),
        panel.background = element_blank(),
        axis.text.y = element_text(size=8)) +
  coord_flip() +
  scale_fill_manual(values=c("#999999",
                             "gray30"),
                    breaks = c('DT model', 'CT model')) 


#----------------------------------------------------
#---------- Plot networks ---------------------------
#----------------------------------------------------
# Get parameters from output

ctres <- getdrift(summary(ctfit))
dtres <- getdrift(summary(dtfit), mode = "DT")

# Save
output <- tibble::lst(time, ctmodel, ctfit, dtmodel, dtfit,
                      ctres, dtres)
saveRDS(output, file = "estimates.RDS")

# Save session information for reproducibility
sink("SessionInfo.txt")
sessionInfo()
sink()


lab_2 = c("S1","S2","S3")
# CT network
par(mfrow=c(1,1))
source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/fun_plots.2.R')
netplot(true_drift_cont, labels = lab_2)
netplot(round(mean_matrices[[4]][[1]],2), labels = lab_2)

netplot(true_drift_disc, labels = lab_2)
netplot(round(mean_matrices[[4]][[2]],2), labels = lab_2)


# ----------------------------------------------------------------------------------
# -------------------- EMPIRICAL ---------------------------------------------------
# ----------------------------------------------------------------------------------

#----------------------------------------------------
#---------- Principal Component Analysis  -----------
#----------------------------------------------------

# select mood variables based on the paper of Wichers & Groot (2016)
data <- read_excel('ESMdata.xlsx')
data_p = data %>%
  select(mood_irritat,
         mood_satisfi,
         mood_lonely, 
         mood_anxious, 
         mood_enthus,
         mood_cheerf,
         mood_guilty,
         mood_doubt,
         mood_strong,
         pat_restl,
         pat_agitate
  )

# check for null values 
colSums(is.na(data_p))

# function that replaces all na's with the median in the columns 
replace_na_with_median <- function(data) {
  for (col in colnames(data)) {
    column <- data[[col]]
    median_value <- median(column, na.rm = TRUE)
    column[is.na(column)] <- median_value
    data[[col]] <- column
  }
  return(data)
}
data_p = replace_na_with_median(data_p)

# check whether all na's are replaced 
colSums(is.na(data_p))

# normalize data by scaling values
data_pr = scale(data_p, center = TRUE, scale = TRUE)

# inspect correlation matrix
corr_matrix = cor(data_pr)
ggcorrplot(corr_matrix)

# PCA: with prcomp
pca_result = prcomp(corr_matrix)
summary(pca_result)

# PCA: with princomp
data.pca = princomp(corr_matrix, scores = T)
summary(data.pca)

# calculate eigenvectors/eigenvalues
res.eig = eigen(corr_matrix)
res.eig
# PCA
data.pca = princomp(corr_matrix, scores = T)
summary(data.pca)
#data.pca$loadings

# visualize results - explained variables per PC
fviz_eig(data.pca, 
         addlabels = TRUE)

# visualize variables and their PC
fviz_pca_var(data.pca, 
             col.var = "cos2",
             gradient.cols = c("black", "orange", "green"),
             repel = TRUE)

# transform dataset with new PC
df.new = as.matrix(data_p) %*% pca_result$rotation
#df.new = as.matrix(data_p) %*% data.pca$loadings
df.new = round(df.new[,1:3],2)
colnames(df.new)= c("p_affect", "n_affect", "m_unrest")
df.new = as.data.frame(df.new)

# add new PCA's to the dataset
data = data %>% 
  cbind(df.new)

#----------------------------------------------------
#---------- Prepare data for analysis ---------------
#----------------------------------------------------
# Extract time variable
data_esm = data %>%
  mutate(resptime_s = as.POSIXct(resptime_s)) %>%
  mutate(resptime_s = format(resptime_s, format = "%H:%M:%S")) %>%
  
  # combine correct date with response time 
  mutate(time = paste(date, resptime_s)) %>%
  mutate(time = as.POSIXct(time, format = "%Y-%m-%d %H:%M:%S")) %>% # formatting
  mutate(time = as.numeric(difftime(time,time[1], units="hours"))) %>% # in hours
  mutate(id = 1) 
#   
#   # get daily measured variables in the correct format
#   group_by(dayno) %>%
#   mutate(mor_qualsleep = ifelse(row_number() == 1, mor_qualsleep, NA)) %>%
#   mutate(mor_feellike = ifelse(row_number() == 1, mor_feellike, NA)) %>%
#   select(mor_qualsleep, mor_feellike, everything())
#   
# colSums(!is.na(data_esm))

# Scale scores
data_esm[,c("p_affect", 
            "n_affect", 
            "m_unrest", 
            "mor_qualsleep", 
            "mor_feellike")]=
  apply(data_esm[,c("p_affect", 
                    "n_affect", 
                    "m_unrest", 
                    "mor_qualsleep", 
                    "mor_feellike")], 2, scale)

#----------------------------------------------------
#---------- Plot Time-intervals ---------------------
#----------------------------------------------------

time_int = abs(as.numeric(diff(data_esm$time)))
hist(time_int, 
     breaks = 50, 
     xlim=c(0,15), 
     col = 'gray40',
     main = '',
     xlab = 'Time-interval in hours')
abline(v = median(time_int),  # Add line for median
       col = "#E69F00",
       lty = 2,
       lwd = 2)
text(x = median(time_int) * 1.5, # Add text for median
     y = 400,
     paste("Median"),
     col = "black",
     cex = .8)

median(time_int)

#----------------------------------------------------
#---------- Plot PCA's  -----------------------------
#----------------------------------------------------
# plot and inspect 
par(mfrow=c(1,1))

plot(data_esm$time[0:400], data_esm$p_affect[0:400], type = 'o', cex = 0.3,
     xlab = 'Time in hours',
     ylab = 'Scores',
     ylim = c(-2, 3))
par(new = TRUE)
plot(data_esm$time[0:400], data_esm$n_affect[0:400], type = 'o', cex = 0.3, col = 'red',
     xlab = '',
     ylab = '',
     yaxt = "n",
     xaxt = "n",
     ylim = c(-2, 3))
par(new = TRUE)
plot(data_esm$time[0:400], data_esm$m_unrest[0:400], type = 'o', cex = 0.3,
     col = rgb(red = 0, green = .5, blue = 1, alpha = 0.7),
     xlab = '',
     ylab = '',
     yaxt = "n",
     xaxt = "n",
     ylim = c(-2, 3))
par(new = TRUE)
# plot(data_esm$time[0:400], data_esm$mor_qualsleep[0:400], type = 'o', cex = 0.3,
#      col = rgb(red = 0, green = 1, blue = 0, alpha = 0.7),
#      xlab = '',
#      ylab = '',
#      yaxt = "n",
#      xaxt = "n",
#      ylim = c(-2, 3))
legend(x = "topright",
       legend = c("Positive affect",
                  "Negative affect",
                  "Mental unrest"),
       col = c('black',
               'red',
               rgb(red = 0, green = .5, blue = 1, alpha = 0.5)),
       pch = c(1, 1, 1),
       lty = c(1, 1, 1),
       cex = 0.6)

# ----------------------------------------------------------------------------------
# -------------------- MODEL FITTING -----------------------------------------------
# ----------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Fit CTM and DTM using ctStanFit

set.seed(3)
p = 5
nobs = nrow(data_esm)
lab = c("PA", "NA", "MU","SQ", "LF")

data_long = data_esm %>%
  select(time,
         id,
         p_affect,
         n_affect,
         m_unrest,
         mor_qualsleep,
         mor_feellike)

# ---------- CT-VAR Model Estimation -------------
ctmodel <- ctModel(type='stanct',
                   manifestNames= c("p_affect",
                                    "n_affect",
                                    "m_unrest",
                                    "mor_qualsleep",
                                    "mor_feellike"),
                   latentNames= paste0(lab,"_l"),
                   LAMBDA = diag(nrow=p),
                   DRIFT = "auto",
                   MANIFESTMEANS = matrix(data=0, nrow=p, ncol=1),
                   MANIFESTVAR="auto",
                   CINT = "auto",
                   DIFFUSION ="auto")
ctfit <- ctStanFit(data_long, ctmodel, optimize=TRUE, cores=2)

# ---------- DT-VAR Model Estimation -------------
dtmodel <- ctModel(type='standt',
                   manifestNames= c("p_affect",
                                    "n_affect",
                                    "m_unrest",
                                    "mor_qualsleep",
                                    "mor_feellike"),
                   latentNames= paste0(lab,"_l"),
                   LAMBDA = diag(nrow=p),
                   DRIFT = "auto",
                   MANIFESTMEANS = matrix(data=0, nrow=p, ncol=1),
                   MANIFESTVAR="auto", 
                   CINT = "auto",
                   DIFFUSION ="auto")
dtfit <- ctStanFit(data_long, dtmodel, optimize=TRUE, cores=2)

# Get parameters from output
ctres <- getdrift(summary(ctfit))
dtres <- getdrift(summary(dtfit), mode = "DT")

# Save
output <- tibble::lst(time, ctmodel, ctfit, dtmodel, dtfit,
                      ctres, dtres)
saveRDS(output, file = "estimates.RDS")

# ----------------------------------------------------------------------------------
# ---------------------------- Analysis and Figures --------------------------------
# ----------------------------------------------------------------------------------

# Load if necessary
ctres <- res$ctres ; dtres <- res$dtres

# extract parameter matrices
drift <- ctres$drift
phi <- dtres$phi

#----------------------------------------------------
#---------- Figure: CT and DT networks --------------
#----------------------------------------------------

source('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/fun_plots_5.R')

# CT network
#pdf('/Users/jesusblanco/Documents/MSc Psychology/Semester 2/Thesis/Analysis/ESMdata/CTnet_emp.pdf',width = 8, height = 8)
netplot(drift, labels = lab)
#dev.off()

# DT network
netplot(phi, labels = lab, shape = "square")
#dev.off()
